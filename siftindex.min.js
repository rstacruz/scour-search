(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.siftindex = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* eslint-disable no-unused-vars */
'use strict';
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

module.exports = Object.assign || function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],2:[function(require,module,exports){
'use strict';

var each = require('./utilities/each');
var cloneWithoutKeys = require('./utilities/clone_without_keys');
var assign = require('object-assign');
var conditions = {};

function si(source) {
  if (!(this instanceof si)) return new si(source);
  this.data = source;
  this.indices = {};
}

si.prototype = {
  /**
   * Creates an index for the field `field`.
   */

  index: function index(field, type) {
    var key = '' + field + ':' + (type || '$eq');
    var index = {};
    this.indices[key] = index;

    each(this.data, function (value, key) {
      var val = value[field];
      if (!index[val]) index[val] = {};
      index[val][key] = 1;
    });

    return this;
  },

  /**
   * Returns keys matching a given value. Run it through `Object.keys` later.
   *
   *     getKeys('name', 'John') // => { '4': 1, '5': 1 }
   */

  getKeys: function getKeys(field, value, type) {
    var key = '' + field + ':' + (type || '$eq');
    if (!this.indices[key]) return;

    var result = this.indices[key][value];
    if (typeof result === 'undefined') return {};

    return result;
  },

  /**
   * Performs a query.
   */

  filter2: function filter2(condition) {
    var result = filter(this, condition);
    return result && Object.keys(result);
  }
};

function filter(idx, condition) {
  var type = condition.type;
  if (!type || !conditions[type]) return;
  return conditions[type](idx, condition);
}

conditions['$eq'] = function (idx, condition) {
  return idx.getKeys(condition.key, condition.value);
};

conditions['$or'] = function (idx, condition) {
  var result = {};

  for (var i = 0, len = condition.value.length; i < len; i++) {
    var subcon = condition.value[i];
    var keys = filter(idx, subcon);
    if (!keys) return;
    assign(result, keys);
  }

  return result;
};

conditions['$and'] = function (idx, condition) {
  var result = {};

  for (var i = 0, len = condition.value.length; i < len; i++) {
    var subcon = condition.value[i];
    var keys = filter(idx, subcon);
    if (!keys) return;
    if (i === 0) assign(result, keys);else {
      each(keys, function (_, key) {
        delete result[key];
      });
    }
  }

  return result;
};

conditions['$in'] = function (idx, condition) {
  return filter(idx, {
    type: '$or',
    value: condition.value.map(function (value) {
      return { type: '$eq', key: condition.key, value: value };
    })
  });
};

conditions['$not'] = function (idx, condition) {
  var subcon = condition.value;
  var result = filter(idx, subcon);

  return cloneWithoutKeys(idx.data, result);
};

conditions['$nin'] = function (idx, condition) {
  var subcon = condition.value;
  return filter(idx, {
    type: '$not',
    value: {
      type: '$in', key: condition.key, value: condition.value
    }
  });
};

module.exports = si;

},{"./utilities/clone_without_keys":3,"./utilities/each":4,"object-assign":1}],3:[function(require,module,exports){
"use strict";

/**
 * Clones an object but misses a key.
 */

module.exports = function cloneWithoutKeys(object, keys) {
  var result = {};
  for (var k in object) {
    if (object.hasOwnProperty(k) && !keys[k]) {
      result[k] = object[k];
    }
  }
  return result;
};

},{}],4:[function(require,module,exports){
'use strict';

/**
 * each : each(list, fn)
 * Iterates through `list` (an array or an object). This is useful when dealing
 * with NodeLists like `document.querySelectorAll`.
 */

function each(list, fn) {
  if (!list) return;

  var i;
  var len = list.length;
  var idx;

  if (typeof len === 'number') {
    if (each.native) return each.native.call(list, fn);
    for (i = 0; i < len; i++) {
      fn(list[i], i, i);
    }
  } else {
    idx = 0;
    for (i in list) {
      if (list.hasOwnProperty(i)) fn(list[i], i, idx++);
    }
  }

  return list;
}

each.native = Array.prototype.forEach;

module.exports = each;

},{}]},{},[2])(2)
});